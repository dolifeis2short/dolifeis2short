(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{378:function(a,t,e){"use strict";e.r(t);var n=e(48),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"개발용어"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#개발용어"}},[a._v("#")]),a._v(" 개발용어")]),a._v(" "),e("p",[a._v("개발에 사용되는 용어별 정리")]),a._v(" "),e("h2",{attrs:{id:"_1-web-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-web-model"}},[a._v("#")]),a._v(" 1. WEB MODEL")]),a._v(" "),e("h3",{attrs:{id:"model1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#model1"}},[a._v("#")]),a._v(" MODEL1")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("사용자로부터 요청을 JSP가 받아(더 정확히는 JSP 에서 사용자가 요청을 합니다.)\nJava Bean(DTO, DAO)을 호출해 처리합니다. 이런 방식을Model1이라고 한답니다.\n\n- 개발 속도가 빠르고\n- 배우기 쉽지만\n- 프레젠테이션 로직과 비즈니스 로직이 혼재\n- JSP 코드가 복잡해져 유지 보수가 어려워집니다.\n")])])]),e("h3",{attrs:{id:"model2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#model2"}},[a._v("#")]),a._v(" MODEL2")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("- view, Controller, model을 분리\n1. 보여주는view(JSP페이지), 처리 하는 model(빈,클랙스), 제어하는 controller(서블릿)로 확실하게 나뉩니다.\n2. 구조가 복잡하여 학습이 어렵고 설정 및 작업 분량이 많습니다.\n3. 백엔드와 프론트 엔드가 나뉘어져 분업이 편리합니다.\n\n")])])]),e("h3",{attrs:{id:"model3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#model3"}},[a._v("#")]),a._v(" MODEL3")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("**1. 뷰**\n\n뷰의 역할은**UI에 관련된 것**을 다루는것 입니다.\n사용자가 스크린을 통해서 보는 것들에 대한 구조, 레이아웃, 형태를 정의하는 것입니다. \n뷰는 애니메이션 같은 UI 로직을 포함하되 비즈니스 로직을 포함하지 말아야 합니다.\n\n**2. 뷰 모델**\n\n뷰 모델의 역할은**뷰가 사용할 메서드와 필드를 구현**하고, 뷰에게 상태 변화를 알리는 것입니다. \n(뷰는 뷰 모델의 상태 변화를 옵저빙한다.) \n뷰 모델에서 제공하는 메서드와 필드가 UI에서 제공할 기능을 정의합니다. \n하지만, 뷰가 이 기능을 어떻게 보여줄 것인지를 결정합니다.\n일반적으로 뷰 모델과 모델은 일대다 관계를 형성합니다. \n\n**3. 모델**\n모델은 비즈니스 로직과 [유효성 검사]\n(https://en.wikipedia.org/wiki/Data_validation)와 데이터를 포함하는 앱의 도메인 모델](https://en.wikipedia.org/wiki/Domain_model)로 생각할 수 있습니다. \n쉽게 말해서, 모델은 앱에서 사용할 데이터에 관련된 행위와 데이터를 다룹니다.\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);