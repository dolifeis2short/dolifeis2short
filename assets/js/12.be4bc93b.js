(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{379:function(a,t,s){"use strict";s.r(t);var e=s(48),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"f-p"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#f-p"}},[a._v("#")]),a._v(" F.P")]),a._v(" "),s("p",[a._v("객체지향 프로그래밍에서 벗어나서 새로운 것을 배워보자")]),a._v(" "),s("h2",{attrs:{id:"_1-프로그래밍-종류"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-프로그래밍-종류"}},[a._v("#")]),a._v(" 1. 프로그래밍 종류")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("* 절차적 \n* 객체지향적 - 객체와 데이터가 유착되어 응집도가 높은 패키지 형태\n* 함수형 - 데이터를 숨길 필요가 없고, 작은 자료형을 유지\n")])])]),s("h2",{attrs:{id:"_2-개발-방식"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-개발-방식"}},[a._v("#")]),a._v(" 2. 개발 방식")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("간단한 함수들로 작업을 분리\n3) 흐름 체인으로 데이터를 처리\n4) 리액티브 패러다임을 실현하며, 이벤트 중심 코드로 복잡성을 줄인다.\n- 함수형 언어는 결국, 분해와 합성을 통한 상호 작용을 통한 연산 작용\n\n리액티브는 관찰이 가능해야 한다.\n")])])]),s("h2",{attrs:{id:"_3-개발-특징"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-개발-특징"}},[a._v("#")]),a._v(" 3. 개발 특징")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1) 스트림을 통과한 데이터는 불변성 특징, 원천 데이터는 수정되지 않고 새롭게 생성된 데이터 \n2) 스트림은 객체에 특화되었며, unboxing이 않일어나게 하기 위해서 interface를 사용 !!\n3) 스트림은 한번 사용하고 나면, 다시 사용할 수 없다. \n4) 스트림 중 void를 호출하면, 전체 스트림 데이터를 소모하고 종료된다. (최종연산)\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);