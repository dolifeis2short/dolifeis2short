(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{384:function(n,e,t){"use strict";t.r(e);var a=t(48),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[n._v("#")]),n._v(" API")]),n._v(" "),t("h2",{attrs:{id:"_1-java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-java"}},[n._v("#")]),n._v(" 1. JAVA")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("자바 5\n  제네릭\n  For 루프 개선\n  컨커런트 API\n  어노테이션\n  EUNM\n  vararg\n  오토박싱/언박싱\n\n자바 6 (안정화버전)\n  GI 가비지 콜렉션\n  데스크톱 API\n  자바 컴파일 API\n\n자바 7\n  FILE NIO 2.0\n  포크/조인 프레임워크\n  다이아몬드 연산자\n  try-with-resource\n  예외처리\n\n자바 8\n  람다 표현식\n  함수형 인터페이스\n    Predicate : test(), 두 개의 객체를 비교할 때 사용\n    Supplier : get(), generic 리턴값\n    Consumer : accept(), 리턴값이 없으므로 작업을 수행하고 결과를 받을 일이 없을 때 사용\n    Function : apply(), generic 타입 두개(입력타입, 리턴타입) 갖고 있음. 변환을 할 필요가 있을 때 사용\n  Stream API\n    filter(Predicate < T > predicate) : 데이터를 조건으로 거를 때 사용\n    map(Function < T, R > mapper) : 데이터를 특정 데이터로 변환\n    forEach(Consumer <? super T> action) : for 루프를 수행하는 것처럼 각각의 항목을 꺼냄\n    reduce(BinaryOperator < T > accumulator) : 처음 두 요소를 가지고 연산한 결과를 가지고 그 다음 요소와 연산한다.\n  메서드 참조\n  날짜와 시간 API\n    java.time.ZoneDateTime / java.time.LocalDate\n    java.time.format.DateTimeFormatter\n  인터페이스 개선\n  Optional\n  CompletableFuture\n  인터페이스 Default Method\n\n자바 9\n  자바 모듈화\n  REPL 기능인 JShell\n  통합 JVM 로깅\n  HTML5 자바 DOC\n  try-with-resouce 개선\n  인터페이스 메서드 형식 추가\n  다이아몬드 연산자 개선\n  프로세스 API\n  CompletableFutre 기능개선\n  반응형 스트림 API 추가\n\n자바 10\n  로컬 변수 형식 추론\n  GI GC개선\n\n자바 11\n  HTTP 클라이언트\n  콜렉션 객체를 배열로 변경하는 기능\n  var 키워드 지원 확대\n  String 클래스 기능 추가\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);